generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userGroupName   String[]  @default(["general"])

  accounts        Account[]
  usergroup       UserGroup[]
  campaign        Campaign[]
  notification    Notification[]
  role            Role      @default(USER) 
}

enum Role {
  USER
  ADMIN
}

enum Approval {
  PENDING
  APPROVE
}
model Campaign {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  design             Json
  userId             String   @db.ObjectId
  groupId            String   @db.ObjectId
  startDate          DateTime
  endDate            DateTime
  state              Approval @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  group UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  design             Json
  userId             String   @db.ObjectId
  groupId            String   @db.ObjectId
  startDate          DateTime
  endDate            DateTime
  state              Approval @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  group UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserGroup {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign[]
  notification    Notification[]

}
